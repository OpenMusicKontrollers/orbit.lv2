# Copyright (c) 2015 Hanspeter Portner (dev@open-music-kontrollers.ch)
#
# This is free software: you can redistribute it and/or modify
# it under the terms of the Artistic License 2.0 as published by
# The Perl Foundation.
#
# This source is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# Artistic License 2.0 for more details.
#
# You should have received a copy of the Artistic License 2.0
# along the source as a COPYING file. If not, obtain it from
# http://www.perlfoundation.org/artistic_license_2_0.

@prefix owl:			<http://www.w3.org/2002/07/owl#> .
@prefix foaf:			<http://xmlns.com/foaf/0.1/> .
@prefix doap:			<http://usefulinc.com/ns/doap#> .
@prefix rdf:			<http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: 		<http://www.w3.org/2000/01/rdf-schema#> .
@prefix lv2:			<http://lv2plug.in/ns/lv2core#> .
@prefix atom:			<http://lv2plug.in/ns/ext/atom#> .
@prefix time:			<http://lv2plug.in/ns/ext/time#> .
@prefix midi:			<http://lv2plug.in/ns/ext/midi#> .
@prefix urid:			<http://lv2plug.in/ns/ext/urid#> .
@prefix units:		<http://lv2plug.in/ns/extensions/units#> .
@prefix work:			<http://lv2plug.in/ns/ext/worker#> .
@prefix state:		<http://lv2plug.in/ns/ext/state#> .
@prefix patch:		<http://lv2plug.in/ns/ext/patch#> .

@prefix osc:  <http://open-music-kontrollers.ch/lv2/osc#> .
@prefix lic:			<http://opensource.org/licenses/> .
@prefix omk:			<http://open-music-kontrollers.ch/ventosus#> .
@prefix proj:			<http://open-music-kontrollers.ch/lv2/> .
@prefix orbit:		<http://open-music-kontrollers.ch/lv2/orbit#> .

osc:Event
	a rdfs:Class ;
	rdfs:subClassOf atom:Object ;
	rdfs:label "OSC Event (Bundle or Message)" .

# Maintainer
omk:me
	a foaf:Person ;
	foaf:name "Hanspeter Portner" ;
	foaf:mbox <mailto:dev@open-music-kontrollers.ch> ;
	foaf:homepage <http://open-music-kontrollers.ch> .

# Project
proj:orbit
	a doap:Project ;
	doap:maintainer omk:me ;
	doap:name "Orbit Bundle" .

# Looper Plugin
orbit:looper_punch
	a lv2:Parameter ;
	rdfs:range atom:Int ;
	rdfs:label "Punch Mode" ;
	lv2:minimum 0 ;
	lv2:maximum 1 ;
	lv2:scalePoint [ rdfs:label "Beat" ;	rdf:value 0 ] ;
	lv2:scalePoint [ rdfs:label "Bar" ;		rdf:value 1 ] .
orbit:looper_width
	a lv2:Parameter ;
	rdfs:range atom:Int ;
	rdfs:label "Width" ;
	lv2:minimum 1 ;
	lv2:maximum 128 .
orbit:looper_mute
	a lv2:Parameter ;
	rdfs:range atom:Bool ;
	rdfs:label "Mute" .
orbit:looper_switch
	a lv2:Parameter ;
	rdfs:range atom:Bool ;
	rdfs:label "Switch" .

orbit:looper_play_capacity
	a lv2:Parameter ;
	rdfs:range atom:Float ;
	rdfs:label "Playback Capacity" ;
	units:unit units:pc ;
	lv2:minimum 0.0 ;
	lv2:maximum 100.0 .
orbit:looper_rec_capacity
	a lv2:Parameter ;
	rdfs:range atom:Float ;
	rdfs:label "Recording Capacity" ;
	units:unit units:pc ;
	lv2:minimum 0.0 ;
	lv2:maximum 100.0 .
orbit:looper_position
	a lv2:Parameter ;
	rdfs:range atom:Float ;
	rdfs:label "Position" ;
	units:unit units:pc ;
	lv2:minimum 0.0 ;
	lv2:maximum 100.0 .

orbit:looper
	a lv2:Plugin ,
		lv2:ConverterPlugin ;
	doap:name "Orbit Looper" ;
	doap:license lic:Artistic-2.0 ;
	lv2:project proj:orbit ;
	lv2:requiredFeature urid:map, state:loadDefaultState ;
	lv2:optionalFeature lv2:isLive, lv2:hardRTCapable ;
	lv2:extensionData	state:interface ;

	lv2:port [
		# sink event port
	  a lv2:InputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports midi:MidiEvent ;
		atom:supports time:Position ;
		atom:supports osc:Event ;
		atom:supports patch:Message ;
		lv2:index 0 ;
		lv2:symbol "event_in" ;
		lv2:name "Event Input" ;
		lv2:designation lv2:control ;
	] , [
		# source event port
	  a lv2:OutputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports midi:MidiEvent ;
		atom:supports osc:Event ;
		atom:supports patch:Message ;
		lv2:index 1 ;
		lv2:symbol "event_out" ;
		lv2:name "Event Output" ;
		lv2:designation lv2:control ;
	] ;

	patch:writable
		orbit:looper_punch ,
		orbit:looper_width ,
		orbit:looper_mute ,
		orbit:looper_switch ;
	patch:readable
		orbit:looper_play_capacity ,
		orbit:looper_rec_capacity ,
		orbit:looper_position ;

	state:state [
		orbit:looper_punch 1 ;
		orbit:looper_width 4 ;
		orbit:looper_mute false ;
		orbit:looper_switch false ;
	] .

# Click Plugin
orbit:click_bar_enabled
	a lv2:Parameter ;
	rdfs:range atom:Bool ;
	rdfs:label "Bar Enabled" .
orbit:click_beat_enabled
	a lv2:Parameter ;
	rdfs:range atom:Bool ;
	rdfs:label "Beat Enabled" .
orbit:click_bar_note
	a lv2:Parameter ;
	rdfs:range atom:Int ;
	rdfs:label "Bar Note" ;
	units:unit units:midiNote ;
	lv2:minimum 0 ;
	lv2:maximum 127 .
orbit:click_beat_note
	a lv2:Parameter ;
	rdfs:range atom:Int ;
	rdfs:label "Beat Note" ;
	units:unit units:midiNote ;
	lv2:minimum 0 ;
	lv2:maximum 127 .

orbit:click
	a lv2:Plugin ,
		lv2:ConverterPlugin ;
	doap:name "Orbit Click" ;
	doap:license lic:Artistic-2.0 ;
	lv2:project proj:orbit ;
	lv2:requiredFeature urid:map, state:loadDefaultState ;
	lv2:optionalFeature lv2:isLive, lv2:hardRTCapable ;
	lv2:extensionData	state:interface ;

	lv2:port [
		# sink event port
	  a lv2:InputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports time:Position ;
		atom:supports patch:Message ;
		lv2:index 0 ;
		lv2:symbol "event_in" ;
		lv2:name "Event Input" ;
		lv2:designation lv2:control ;
	] , [
		# source event port
	  a lv2:OutputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports patch:Message;
		lv2:index 1 ;
		lv2:symbol "event_out" ;
		lv2:name "Event Output" ;
		lv2:designation lv2:control ;
	] , [
		# source audio port
	  a lv2:OutputPort ,
			lv2:AudioPort ;
		lv2:index 2 ;
		lv2:symbol "audio_out" ;
		lv2:name "Audio Output" ;
	] ;

	patch:writable
		orbit:click_bar_enabled ,
		orbit:click_beat_enabled ,
		orbit:click_bar_note ,
		orbit:click_beat_note ;
	
	state:state [
		orbit:click_bar_enabled true ;
		orbit:click_beat_enabled true ;
		orbit:click_bar_note 72 ;
		orbit:click_beat_note 60 ;
	] .

# Pacemaker Plugin
orbit:pacemaker_beat_unit
	a lv2:Parameter ;
	rdfs:range atom:Int ;
	rdfs:label "Beat Unit" ;
	lv2:minimum 1 ;
	lv2:maximum 128 ;
	lv2:scalePoint [ rdfs:label "1/1" ;						rdf:value 1 ] ;
	lv2:scalePoint [ rdfs:label "1/2" ;						rdf:value 2 ] ;
	lv2:scalePoint [ rdfs:label "1/4" ;						rdf:value 4 ] ;
	lv2:scalePoint [ rdfs:label "1/8" ;						rdf:value 8 ] ;
	lv2:scalePoint [ rdfs:label "1/16" ;					rdf:value 16 ] ;
	lv2:scalePoint [ rdfs:label "1/32" ;					rdf:value 32 ] ;
	lv2:scalePoint [ rdfs:label "1/64" ;					rdf:value 64 ] ;
	lv2:scalePoint [ rdfs:label "1/128" ;					rdf:value 128 ] .
orbit:pacemaker_beats_per_bar
	a lv2:Parameter ;
	rdfs:range atom:Int ;
	rdfs:label "Beats per Bar" ;
	units:unit units:beat ;
	lv2:minimum 1 ;
	lv2:maximum 128 .
orbit:pacemaker_beats_per_minute
	a lv2:Parameter ;
	rdfs:range atom:Int ;
	rdfs:label "Beats per Minute" ;
	units:unit units:bpm ;
	lv2:minimum 1 ;
	lv2:maximum 400 .
orbit:pacemaker_rolling
	a lv2:Parameter ;
	rdfs:range atom:Bool ;
	rdfs:label "Rolling" .
orbit:pacemaker_rewind
	a lv2:Parameter ;
	rdfs:range atom:Bool ;
	rdfs:label "Rewind" .

orbit:pacemaker
	a lv2:Plugin ,
		lv2:ConverterPlugin ;
	doap:name "Orbit Pacemaker" ;
	doap:license lic:Artistic-2.0 ;
	lv2:project proj:orbit ;
	lv2:requiredFeature urid:map, state:loadDefaultState ;
	lv2:optionalFeature lv2:isLive, lv2:hardRTCapable ;
	lv2:extensionData state:interface ;

	lv2:port [
		# sink event port
	  a lv2:InputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports patch:Message ;
		lv2:index 0 ;
		lv2:symbol "event_in" ;
		lv2:name "Event Input" ;
		lv2:designation lv2:control ;
	] , [
		# source event port
	  a lv2:OutputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports time:Position ;
		atom:supports patch:Message ;
		lv2:index 1 ;
		lv2:symbol "event_out" ;
		lv2:name "Event Output" ;
		lv2:designation lv2:control ;
	] ;

	patch:writable
		orbit:pacemaker_beat_unit ,
		orbit:pacemaker_beats_per_bar ,
		orbit:pacemaker_beats_per_minute ,
		orbit:pacemaker_rolling ,
		orbit:pacemaker_rewind ;

	state:state [
		orbit:pacemaker_beat_unit 4 ;
		orbit:pacemaker_beats_per_bar 4 ;
		orbit:pacemaker_beats_per_minute 120 ;
		orbit:pacemaker_rolling false ;
		orbit:pacemaker_rewind true ;
	] .

# Tapdancer Plugin
orbit:tapdancer_beat_unit
	a lv2:Parameter ;
	rdfs:range atom:Int ;
	rdfs:label "Beat Unit" ;
	lv2:minimum 1 ;
	lv2:maximum 128 ;
	lv2:scalePoint [ rdfs:label "1/1" ;						rdf:value 1 ] ;
	lv2:scalePoint [ rdfs:label "1/2" ;						rdf:value 2 ] ;
	lv2:scalePoint [ rdfs:label "1/4" ;						rdf:value 4 ] ;
	lv2:scalePoint [ rdfs:label "1/8" ;						rdf:value 8 ] ;
	lv2:scalePoint [ rdfs:label "1/16" ;					rdf:value 16 ] ;
	lv2:scalePoint [ rdfs:label "1/32" ;					rdf:value 32 ] ;
	lv2:scalePoint [ rdfs:label "1/64" ;					rdf:value 64 ] ;
	lv2:scalePoint [ rdfs:label "1/128" ;					rdf:value 128 ] .
orbit:tapdancer_beats_per_bar
	a lv2:Parameter ;
	rdfs:range atom:Int ;
	rdfs:label "Beats per Bar" ;
	units:unit units:beat ;
	lv2:minimum 1 ;
	lv2:maximum 128 .
orbit:tapdancer_filter_stiffness
	a lv2:Parameter ;
	rdfs:range atom:Int ;
	rdfs:label "Filter Stiffness" ;
	units:unit units:bpm ;
	lv2:minimum 1 ;
	lv2:maximum 10000 .
orbit:tapdancer_tap
	a lv2:Parameter ;
	rdfs:range atom:Bool ;
	rdfs:label "Tap" .
orbit:tapdancer_beats_per_minute
	a lv2:Parameter ;
	rdfs:range atom:Int ;
	rdfs:label "Beats per Minute" ;
	units:unit units:bpm ;
	lv2:minimum 1 ;
	lv2:maximum 400 .

orbit:tapdancer
	a lv2:Plugin ,
		lv2:ConverterPlugin ;
	doap:name "Orbit Tapdancer" ;
	doap:license lic:Artistic-2.0 ;
	lv2:project proj:orbit ;
	lv2:requiredFeature urid:map, state:loadDefaultState ;
	lv2:optionalFeature lv2:isLive, lv2:hardRTCapable ;
	lv2:extensionData state:interface ;

	lv2:port [
	  a lv2:InputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports osc:Event ;
		atom:supports patch:Message ;
		lv2:index 0 ;
		lv2:symbol "event_in" ;
		lv2:name "Event Input" ;
		lv2:designation lv2:control ;
	] , [
	  a lv2:OutputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports time:Position ;
		atom:supports patch:Message ;
		lv2:index 1 ;
		lv2:symbol "event_out" ;
		lv2:name "Event Output" ;
		lv2:designation lv2:control ;
	] ;

	patch:writable
		orbit:tapdancer_beat_unit ,
		orbit:tapdancer_beats_per_bar ,
		orbit:tapdancer_tap ,
		orbit:tapdancer_filter_stiffness ;

	patch:readable
		orbit:tapdancer_beats_per_minute ;

	state:state [
		orbit:tapdancer_beat_unit 4 ;
		orbit:tapdancer_beats_per_bar 4 ;
		orbit:tapdancer_filter_stiffness 1500 ;
		orbit:tapdancer_tap false ;
	] .

# Click Beatbox
orbit:beatbox_bar_enabled
	a lv2:Parameter ;
	rdfs:range atom:Bool ;
	rdfs:label "Bar Enabled" .
orbit:beatbox_beat_enabled
	a lv2:Parameter ;
	rdfs:range atom:Bool ;
	rdfs:label "Beat Enabled" .
orbit:beatbox_bar_note
	a lv2:Parameter ;
	rdfs:range atom:Int ;
	rdfs:label "Bar Note" ;
	units:unit units:midiNote ;
	lv2:minimum 0 ;
	lv2:maximum 127 .
orbit:beatbox_beat_note
	a lv2:Parameter ;
	rdfs:range atom:Int ;
	rdfs:label "Beat Note" ;
	units:unit units:midiNote ;
	lv2:minimum 0 ;
	lv2:maximum 127 .
orbit:beatbox_bar_channel
	a lv2:Parameter ;
	rdfs:range atom:Int ;
	rdfs:label "Bar Channel" ;
	lv2:minimum 0 ;
	lv2:maximum 15 .
orbit:beatbox_beat_channel
	a lv2:Parameter ;
	rdfs:range atom:Int ;
	rdfs:label "Beat Channel" ;
	lv2:minimum 0 ;
	lv2:maximum 15 .

orbit:beatbox
	a lv2:Plugin ,
		lv2:ConverterPlugin ;
	doap:name "Orbit Beatbox" ;
	doap:license lic:Artistic-2.0 ;
	lv2:project proj:orbit ;
	lv2:requiredFeature urid:map, state:loadDefaultState ;
	lv2:optionalFeature lv2:isLive, lv2:hardRTCapable ;
	lv2:extensionData	state:interface ;

	lv2:port [
		# sink event port
	  a lv2:InputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports time:Position ;
		atom:supports patch:Message;
		lv2:index 0 ;
		lv2:symbol "event_in" ;
		lv2:name "Event Input" ;
		lv2:designation lv2:control ;
	] , [
		# source event port
	  a lv2:OutputPort ,
			atom:AtomPort ;
		atom:bufferType atom:Sequence ;
		atom:supports midi:MidiEvent;
		atom:supports patch:Message;
		lv2:index 1 ;
		lv2:symbol "midi_out" ;
		lv2:name "MIDI Output" ;
		lv2:designation lv2:control ;
	] ;

	patch:writable
		orbit:beatbox_bar_enabled ,
		orbit:beatbox_beat_enabled ,
		orbit:beatbox_bar_note ,
		orbit:beatbox_beat_note ,
		orbit:beatbox_bar_channel ,
		orbit:beatbox_beat_channel ;

	state:state [
		orbit:beatbox_bar_enabled true ;
		orbit:beatbox_beat_enabled true ;
		orbit:beatbox_bar_note 72 ;
		orbit:beatbox_beat_note 60 ;
		orbit:beatbox_bar_channel 0 ;
		orbit:beatbox_beat_channel 0 ;
	] .
